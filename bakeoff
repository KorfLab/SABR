#!/usr/bin/env perl

use strict;
use warnings;
use Cwd;
use Getopt::Std;
our ($opt_a, $opt_d, $opt_f, $opt_m, $opt_p, $opt_s, $opt_t);
getopts('adfmp:s:t');

sub run {
	my $cli = shift;
	print STDERR "$cli\n";
	system($cli) == 0 or die;
}

my $usage = "
=============================================================================
Spliced Alignment Bakeoff Runner

usage: $0 [options] <DNA> <FTX> <DIR> [<PROGRAMS...>]
options:
  -a        align with parameters optimized for accuracy
  -d        pass debugging flag (keep temp files)
  -f        force overwrite of ftx.gz files (not indexes)
  -m        perform md5 checksums
  -p <int>  processors [1]
  -s <int>  random seed [unset]
  -t        testing mode (data reduction via sampling)

DNA: path to FASTA file of reference sequence
FTX: path to FTX file of reference annotation
DIR: output directory
PROGRAMS: any collection of programs supported by run-aligner.py

examples:
  ./bakeoff -ts1 data/ce01.* build blat star
  ./bakeoff -fmts1 data/ce01.* build blat star > log.txt 2>&1
=============================================================================
";

die $usage unless @ARGV >= 3;
my ($src_dna, $src_ftx, $dir, @program) = @ARGV;
my $BASE = getcwd();
my $dna = "genome.fa";
my $ftx = "genome.ftx";
my $rna = "reads.fa.gz";
my $readsim = "python3 $BASE/src/read-simulator.py";
my $runalign = "python3 $BASE/src/run-aligner.py";

# Setup
if (not -d $dir) {
	run("mkdir $dir");
	if ($src_dna =~ /.gz$/) {run("gunzip -c $src_dna > $dir/$dna")}
	else                    {run("cp $src_dna $dir/$dna")}
	if ($src_ftx =~ /.gz$/) {run("gunzip -c $src_ftx > $dir/$ftx")}
	else                    {run("cp $src_ftx $dir/$ftx")}
	my $cli = "$readsim $dir/$dna $dir/$ftx --double";
	if ($opt_t) {$cli .= " --samplereads 0.1 --samplegenes 0.1"}
	if ($opt_s) {$cli .= " --seed $opt_s"}
	$cli .= " | gzip > $dir/$rna";
	run($cli);
}

# Align
chdir $dir;
foreach my $prog (@program) {
	my $cli = "$runalign $dna $rna $prog ";
	$cli .= " --accurate" if $opt_a;
	$cli .= " --threads $opt_p" if $opt_p;
	$cli .= " --debug" if $opt_d;
	run($cli) if not -s "$prog.ftx.gz" or $opt_f;
}

# Checksum
if ($opt_m) {
	my @file = ($dna, $ftx, $rna);
	foreach my $prog (@program) {push @file, "$prog.ftx.gz"}
	foreach my $f (@file) {
		my $out = ($f =~ /\.gz$/)  ? `gunzip -c $f | md5sum` : `md5sum $f`;
		my ($md5, $fn) = split(/\s+/, $out);
		print "BAKEOFF MD5 $f: $md5\n";
	}
}

# Compare, Plot, etc
