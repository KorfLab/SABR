#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Std;
our ($opt_p, $opt_s, $opt_t, $opt_v, $opt_x);
getopts('p:s:tvx');

sub run {
	my $cli = shift;
	print STDERR "$cli\n "if $opt_v;
	system($cli) == 0 or die;
}

my $usage = "
=============================================================================
Spliced Alignment Bakeoff Wrapper

usage: $0 [options] <DNA> <FTX> <DIR> [<PROGRAMS...>]
options:
  -p <int>  processors [1]
  -s <int>  random seed [unset]
  -t        testing mode (data reduction via sampling)
  -v        verbose output
  -x        experimental genome (not real)

DNA: path to FASTA file of reference sequence
FTX: path to FTX file of reference annotation
DIR: output directory
PROGRAMS: any collection of programs supported by run-aligner.py
  blat bowtie2 bwa-mem gmap hisat2 magicblast minimap2 pblat star tophat2

example:
  ./bakeoff -vts1 data/ce01.* build pblat minimap2

=============================================================================
";

die $usage unless @ARGV >= 3;
my ($src_dna, $src_ftx, $dir, @program) = @ARGV;

my $dna = "genome.fa";
my $ftx = "genome.ftx";
my $rna = "reads.fa.gz";

# Setup

if (not -d $dir) {
	run("mkdir $dir");
	if ($src_dna =~ /.gz$/) {run("gunzip -c $src_dna > $dir/$dna")}
	else                    {run("cp $src_dna $dir/$dna")}
	if ($src_ftx =~ /.gz$/) {run("gunzip -c $src_ftx > $dir/$ftx")}
	else                    {run("cp $src_ftx $dir/$ftx")}
	my $cli = "python3 read-simulator.py $dir/$dna $dir/$ftx --double";
	$cli .= ' --coding' unless $opt_x;
	if ($opt_t) {$cli .= " --samplereads 0.1 --samplegenes 0.1"}
	if ($opt_s) {$cli .= " --seed $opt_s"}
	$cli .= " | gzip > $dir/$rna";
	run($cli)
}

# Align

chdir $dir;
foreach my $prog (@program) {
	my $cli = "python3 ../run-aligner.py $dna $rna $prog ";
	$cli .= " --threads $opt_p" if $opt_p;
	$cli .= " --verbose" if $opt_v;
	run($cli) if not -s "$prog.ftx.gz";
}

# Compare, Plot, etc

# opt_x will come into play here
